DROP PROCEDURE IF EXISTS GET_INSTRUMENTS;
CREATE PROCEDURE GET_INSTRUMENTS(IN P_REQUEST_RANGE INT, IN P_REQUEST_LIMIT INT, IN P_RETRIEVE_ALL BOOLEAN, IN P_FILTER VARCHAR(25))
    BEGIN
        DECLARE DONE INT DEFAULT FALSE;
        DECLARE V_ISIN VARCHAR(25);
        DECLARE V_IS_ACTIVE BOOLEAN;
        DECLARE V_INSTRUMENT_ISSUER VARCHAR(10);
        DECLARE V_RATE FLOAT;
        DECLARE V_MATURITY DATE;
        DECLARE V_LAST_SESSION_DATE DATE;
        DECLARE V_FIRST_SESSION_DATE DATE;
        DECLARE V_COUNTRY_NAME VARCHAR(64);
        DECLARE V_CURRENCY_NAME VARCHAR(64);
        DECLARE V_HISTORY_TABLE_NAME VARCHAR(33);
        DECLARE CONDITIONAL_LIMIT INT;

        DECLARE CURS CURSOR FOR
            SELECT
                ID.ISIN,
                ID.IS_ACTIVE,
                ID.INSTRUMENT_ISSUER,
                ID.RATE,
                ID.MATURITY,
                ID.LAST_SESSION_DATE,
                ID.FIRST_SESSION_DATE,
                ICC.COUNTRY_NAME,
                CC.CURRENCY_NAME,
                CONCAT(ID.ISIN, '_HISTORY') HISTORIC_TABLE_NAME
            FROM CR_TRADING_SESSION_DATA.INSTRUMENT_DATA ID
                INNER JOIN CR_TRADING_SESSION_DATA.CURRENCY_CATALOG CC ON ID.CURRENCY = CC.CURRENCY_ID
                INNER JOIN CR_TRADING_SESSION_DATA.ISSUER_COUNTRY_CATALOG ICC ON ID.ISSUER_COUNTRY = ICC.COUNTRY_CODE
            WHERE P_RETRIEVE_ALL OR (ID.MATURITY > CURRENT_DATE() AND ID.IS_ACTIVE)
            ORDER BY
                CASE
                    WHEN P_FILTER = 'maturity' THEN MATURITY
                    END DESC,
                CASE
                    WHEN P_FILTER = 'rate' THEN RATE
                    END DESC,
                CASE
                    WHEN P_FILTER = 'release' THEN FIRST_SESSION_DATE
                    END DESC,
                CASE
                    WHEN P_FILTER IS NULL THEN FIRST_SESSION_DATE
                END DESC
            LIMIT P_REQUEST_LIMIT OFFSET P_REQUEST_RANGE;

        DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;

        DROP TEMPORARY TABLE IF EXISTS RESULTS;
        CREATE TEMPORARY TABLE IF NOT EXISTS RESULTS (
            ISIN VARCHAR(25),
            IS_ACTIVE BOOLEAN,
            INSTRUMENT_ISSUER VARCHAR(10),
            RATE FLOAT,
            MATURITY DATE,
            FIRST_SESSION_DATE DATE,
            COUNTRY_NAME VARCHAR(64),
            CURRENCY_NAME VARCHAR(64),
            VECTOR_PRICE FLOAT
        );

        OPEN CURS;

        READ_LOOP : LOOP
            FETCH CURS INTO V_ISIN, V_IS_ACTIVE, V_INSTRUMENT_ISSUER, V_RATE, V_MATURITY, V_FIRST_SESSION_DATE, V_LAST_SESSION_DATE, V_COUNTRY_NAME, V_CURRENCY_NAME, V_HISTORY_TABLE_NAME;
            IF DONE THEN
                LEAVE READ_LOOP;
            END IF;

            SET @PARAMETERIZED_STATEMENT = CONCAT('SELECT VECTOR_PRICE FROM ', V_HISTORY_TABLE_NAME, ' HTN WHERE HTN.SESSION_DATE=? INTO @VP');
            PREPARE STATEMENT FROM @PARAMETERIZED_STATEMENT;
            SET @LAST_SESSION_DATE = V_LAST_SESSION_DATE;
            EXECUTE STATEMENT USING @LAST_SESSION_DATE;
            DEALLOCATE PREPARE STATEMENT;

            INSERT INTO RESULTS VALUES (V_ISIN, V_IS_ACTIVE, V_INSTRUMENT_ISSUER, V_RATE, V_MATURITY, V_FIRST_SESSION_DATE, V_COUNTRY_NAME, V_CURRENCY_NAME, @VP);
        END LOOP;

        CLOSE CURS;

        SELECT * FROM RESULTS
        ORDER BY
            CASE
                WHEN P_FILTER='price' THEN VECTOR_PRICE
            END DESC
        LIMIT 10 OFFSET P_REQUEST_RANGE;
    END;